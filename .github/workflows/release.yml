name: Build and Release

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - '.gitignore'
      - '.editorconfig'
      - 'LICENSE'
      - '.github/**'
      - '!.github/workflows/**'

jobs:
  check-commit:
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.check.outputs.should_release }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Check commit message
        id: check
        run: |
          COMMIT_MSG=$(git log -1 --pretty=format:%s)
          if [[ $COMMIT_MSG =~ ^(feat|fix): ]]; then
            echo "should_release=true" >> $GITHUB_OUTPUT
          else
            echo "should_release=false" >> $GITHUB_OUTPUT
          fi

  build-and-release:
    needs: check-commit
    if: needs.check-commit.outputs.should_release == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Setup Git
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

      - name: Bump version
        id: version
        run: |
          # Get the current version
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          # Split the version number into major, minor, and patch versions
          IFS='.' read -r -a VERSION_PARTS <<< "$CURRENT_VERSION"
          # Increase the patch number
          NEW_PATCH=$((VERSION_PARTS[2] + 1))
          NEW_VERSION="${VERSION_PARTS[0]}.${VERSION_PARTS[1]}.$NEW_PATCH"
          # Update the version number in package.json
          npm version $NEW_VERSION --no-git-tag-version
          # Output the new version number for subsequent steps
          echo "::set-output name=new_version::$NEW_VERSION"
          # Submit version updates
          git add package.json
          git commit -m "chore: bump version to $NEW_VERSION [skip ci]"
          git push

      - name: Build project
        run: npm run build

      - name: Package applications
        run: |
          mkdir -p dist
          # Package for different platforms
          npm install -g pkg
          pkg . --targets node18-linux-x64,node18-macos-x64,node18-win-x64 --output dist/cursor-reset
          # Add execute permissions for the macOS version
          chmod +x dist/cursor-reset-macos
          
          # Compress the files for each platform
          cd dist
          zip cursor-reset-macos.zip cursor-reset-macos
          zip cursor-reset-win.zip cursor-reset-win.exe
          zip cursor-reset-linux.zip cursor-reset-linux
          cd ..

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.new_version }}
          name: Release v${{ steps.version.outputs.new_version }}
          draft: false
          prerelease: false
          files: |
            dist/cursor-reset-linux.zip
            dist/cursor-reset-macos.zip
            dist/cursor-reset-win.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
